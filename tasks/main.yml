---
# tasks file for osp-vm

  - name: Get current OSP-related Bash env vars
    shell: "env | grep OS_"
    register: osp_vars
    changed_when: false

  - name: Print current OSP-related Bash env vars (for debugging, if required)
    debug:
      var: osp_vars.stdout_lines
    changed_when: false

  - name: Ensuring authentication can occur with current OSP-related Bash env vars
    os_auth:
      auth_type: password
    changed_when: false


  - name: create VM.
    os_server:
      auth:  "{{ osp_vm.api.auth }}"
      endpoint_type: "{{ osp_vm.api.endpoint_type }}"
      name: "{{ item.key }}"
      image: "{{ item.value.image }}"
      flavor: "{{ item.value.flavor }}"
      network: "{{ item.value.network }}"
      auto_ip: "{{ item.value.auto_ip }}"
      key_name: "{{ item.value.key_name }}"
      state: "{{ item.value.server_state }}"
    with_dict:  "{{ osp_vm.vm }}"

  - name: recreate the VM's if desire
    os_server_action:
      auth: "{{ osp_vm.api.auth }}"
      auth_type: "{{ osp_vm.api.endpoint_type }}"
      action: "{{ item.value.action }}"
      server: "{{ item.value.server }}"


  - name: install all the dev rpms
    yum:
      name: "{{ item }}"
      state: latest
    with_items: "{{ osp_vm.vm.rpms }}"


  - name: install pip requirements and the dev environment
    block:
      - name: install virtualenv with pip
        pip:
          name: "{{ item }}"
          state: latest
        with_items:
          - "{{ osp_vm.vm.pip }}"
      - name: create the virtualenv and packages
        pip:
          name: "{{ item.1 }}"
          virtualenv: "{{ item.0.path }}"
          state: latest
        with_subelements:
          - "{{ osp_vm.vm.virtualenvs }}"
          - packages

  - name: install the gems for dev
    gem:
      name: "{{ item }}"
      state: latest
    with_items: "{{ osp_vm.vm.ruby_gems }}"

    

